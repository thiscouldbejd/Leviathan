Namespace Inspection

	''' <summary>Analysis Class for a Folder</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>10/02/2014 15:51:06</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Leviathan\_Inspection\Analysers\Generated\FolderAnalyser.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Leviathan\_Inspection\Analysers\Generated\FolderAnalyser.tt", "1")> _
	Partial Public Class FolderAnalyser
		Inherits System.Object

		#Region " Singleton Implementation "

			#Region " Private Constructors "

				''' <summary>Parametered Constructor (1 Parameters)</summary>
				Private Sub New( _
					ByVal _Folder As System.IO.DirectoryInfo _
				)

					MyBase.New()

					Folder = _Folder

					m_AssemblyFilePaths_LOCK = New System.Object
				End Sub

				''' <summary>Parametered Constructor (2 Parameters)</summary>
				Private Sub New( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution _
				)

					MyBase.New()

					Folder = _Folder
					Host = _Host

					m_AssemblyFilePaths_LOCK = New System.Object
				End Sub

				''' <summary>Parametered Constructor (3 Parameters)</summary>
				Private Sub New( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo() _
				)

					MyBase.New()

					Folder = _Folder
					Host = _Host
					m_AssemblyFilePaths = _AssemblyFilePaths

					m_AssemblyFilePaths_LOCK = New System.Object
				End Sub

				''' <summary>Parametered Constructor (4 Parameters)</summary>
				Private Sub New( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo(), _
					ByVal _AssemblyFilePaths_LOCK As System.Object _
				)

					MyBase.New()

					Folder = _Folder
					Host = _Host
					m_AssemblyFilePaths = _AssemblyFilePaths
					m_AssemblyFilePaths_LOCK = _AssemblyFilePaths_LOCK

				End Sub

				''' <summary>Parametered Constructor (5 Parameters)</summary>
				Private Sub New( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo(), _
					ByVal _AssemblyFilePaths_LOCK As System.Object, _
					ByVal _AssemblyFilePaths_HASVALUE As System.Boolean _
				)

					MyBase.New()

					Folder = _Folder
					Host = _Host
					m_AssemblyFilePaths = _AssemblyFilePaths
					m_AssemblyFilePaths_LOCK = _AssemblyFilePaths_LOCK
					m_AssemblyFilePaths_HASVALUE = _AssemblyFilePaths_HASVALUE

				End Sub

			#End Region

			#Region " Private Shared Variables "

				Private Shared Singleton_Instances As New Hashtable

				Private Shared Singleton_Instances_LOCK As New Object

			#End Region

			#Region " Public Shared Functions "

				Public Shared Function GetInstance( _
					ByVal _Folder As System.IO.DirectoryInfo _
				) As FolderAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Folder)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New FolderAnalyser(_Folder)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function

				Public Shared Function GetInstance( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution _
				) As FolderAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Folder, _Host)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New FolderAnalyser(_Folder, _Host)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function

				Public Shared Function GetInstance( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo() _
				) As FolderAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Folder, _Host, _AssemblyFilePaths)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New FolderAnalyser(_Folder, _Host, _AssemblyFilePaths)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function

				Public Shared Function GetInstance( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo(), _
					ByVal _AssemblyFilePaths_LOCK As System.Object _
				) As FolderAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Folder, _Host, _AssemblyFilePaths, _AssemblyFilePaths_LOCK)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New FolderAnalyser(_Folder, _Host, _AssemblyFilePaths, _AssemblyFilePaths_LOCK)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function

				Public Shared Function GetInstance( _
					ByVal _Folder As System.IO.DirectoryInfo, _
					ByVal _Host As Leviathan.Commands.ICommandsExecution, _
					ByVal _AssemblyFilePaths As System.IO.FileInfo(), _
					ByVal _AssemblyFilePaths_LOCK As System.Object, _
					ByVal _AssemblyFilePaths_HASVALUE As System.Boolean _
				) As FolderAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Folder, _Host, _AssemblyFilePaths, _AssemblyFilePaths_LOCK, _AssemblyFilePaths_HASVALUE)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New FolderAnalyser(_Folder, _Host, _AssemblyFilePaths, _AssemblyFilePaths_LOCK, _AssemblyFilePaths_HASVALUE)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function


			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Folder</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_FOLDER As String = "Folder"

			''' <summary>Public Shared Reference to the Name of the Property: Host</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_HOST As String = "Host"

			''' <summary>Public Shared Reference to the Name of the Property: AssemblyFilePaths</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ASSEMBLYFILEPATHS As String = "AssemblyFilePaths"

			''' <summary>Public Shared Reference to the Name of the Property: AssemblyFilePaths_LOCK</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ASSEMBLYFILEPATHS_LOCK As String = "AssemblyFilePaths_LOCK"

			''' <summary>Public Shared Reference to the Name of the Property: AssemblyFilePaths_HASVALUE</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ASSEMBLYFILEPATHS_HASVALUE As String = "AssemblyFilePaths_HASVALUE"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Folder</summary>
			''' <remarks></remarks>
			Private m_Folder As System.IO.DirectoryInfo

			''' <summary>Private Data Storage Variable for Property: Host</summary>
			''' <remarks></remarks>
			Private m_Host As Leviathan.Commands.ICommandsExecution

			''' <summary>Private Data Storage Variable for Property: AssemblyFilePaths</summary>
			''' <remarks></remarks>
			Private m_AssemblyFilePaths As System.IO.FileInfo()

			''' <summary>Private Data Storage Variable for Property: AssemblyFilePaths_LOCK</summary>
			''' <remarks></remarks>
			Private m_AssemblyFilePaths_LOCK As System.Object

			''' <summary>Private Data Storage Variable for Property: AssemblyFilePaths_HASVALUE</summary>
			''' <remarks></remarks>
			Private m_AssemblyFilePaths_HASVALUE As System.Boolean

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Folder</summary>
			''' <remarks></remarks>
			Public Property Folder() As System.IO.DirectoryInfo
				Get
					Return m_Folder
				End Get
				Set(value As System.IO.DirectoryInfo)
					m_Folder = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Host</summary>
			''' <remarks></remarks>
			Public Property Host() As Leviathan.Commands.ICommandsExecution
				Get
					Return m_Host
				End Get
				Set(value As Leviathan.Commands.ICommandsExecution)
					m_Host = value
				End Set
			End Property


		#End Region

	End Class

End Namespace
Namespace Inspection

	''' <summary>Analysis Class for a Member (e.g. Field, Property Or Method).</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>11/02/2014 10:44:57</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>_Inspection\Analysers\Generated\MemberAnalyser.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("_Inspection\Analysers\Generated\MemberAnalyser.tt", "1")> _
	Partial Public Class MemberAnalyser
		Inherits System.Object
		Implements System.IComparable

		#Region " Public Constructors "
		
			''' <summary>Default Constructor</summary>
			Public Sub New()
		
				MyBase.New()
		
			End Sub
		
			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String _
			)
		
				MyBase.New()
		
				Name = _Name
		
			End Sub
		
			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
		
			End Sub
		
			''' <summary>Parametered Constructor (3 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
		
			End Sub
		
			''' <summary>Parametered Constructor (4 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser, _
				ByVal _Field As System.Reflection.FieldInfo _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
				Field = _Field
		
			End Sub
		
			''' <summary>Parametered Constructor (5 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser, _
				ByVal _Field As System.Reflection.FieldInfo, _
				ByVal _Property As System.Reflection.PropertyInfo _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
				Field = _Field
				[Property] = _Property
		
			End Sub
		
			''' <summary>Parametered Constructor (6 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser, _
				ByVal _Field As System.Reflection.FieldInfo, _
				ByVal _Property As System.Reflection.PropertyInfo, _
				ByVal _Method As System.Reflection.MethodInfo _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
				Field = _Field
				[Property] = _Property
				[Method] = _Method
		
			End Sub
		
			''' <summary>Parametered Constructor (7 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser, _
				ByVal _Field As System.Reflection.FieldInfo, _
				ByVal _Property As System.Reflection.PropertyInfo, _
				ByVal _Method As System.Reflection.MethodInfo, _
				ByVal _Constructor As System.Reflection.ConstructorInfo _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
				Field = _Field
				[Property] = _Property
				[Method] = _Method
				Constructor = _Constructor
		
			End Sub
		
			''' <summary>Parametered Constructor (8 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Description As System.String, _
				ByVal _Child As MemberAnalyser, _
				ByVal _Field As System.Reflection.FieldInfo, _
				ByVal _Property As System.Reflection.PropertyInfo, _
				ByVal _Method As System.Reflection.MethodInfo, _
				ByVal _Constructor As System.Reflection.ConstructorInfo, _
				ByVal _DefaultArguments As System.Object() _
			)
		
				MyBase.New()
		
				Name = _Name
				Description = _Description
				Child = _Child
				Field = _Field
				[Property] = _Property
				[Method] = _Method
				Constructor = _Constructor
				DefaultArguments = _DefaultArguments
		
			End Sub
		
		#End Region

		#Region " Class Plumbing/Interface Code "
		
			#Region " IComparable Implementation "
			
				#Region " Public Methods "
			
					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo
			
						If value Is Nothing Then Return 1
			
						Dim typed_Value As MemberAnalyser = TryCast(value, MemberAnalyser)
			
						If typed_Value Is Nothing Then
			
							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")
			
						Else
			
							Dim return_Value As Integer = 0
			
							If Name Is Nothing AndAlso typed_Value.Name Is Nothing Then
								return_Value = 0
							ElseIf Name Is Nothing Then
								return_Value = -1
							ElseIf typed_Value.Name Is Nothing Then
								return_Value = 1
							Else
								return_Value = Name.CompareTo(typed_Value.Name)
							End If
							If return_Value <> 0 Then Return return_Value
			
							If Child Is Nothing AndAlso typed_Value.Child Is Nothing Then
								return_Value = 0
							ElseIf Child Is Nothing Then
								return_Value = -1
							ElseIf typed_Value.Child Is Nothing Then
								return_Value = 1
							Else
								return_Value = DirectCast(Child, System.IComparable).CompareTo(typed_Value.Child)
							End If
							If return_Value <> 0 Then Return return_Value
			
							Return return_Value
			
						End If
			
					End Function
			
				#End Region
			
			#End Region
			
			#Region " Hashable Implementation "
			
				#Region " Public Methods "
				
					''' <summary>Method to Generate a HashCode</summary>
					''' <remarks></remarks>
					Public Overrides Function GetHashCode() As System.Int32
						Return Leviathan.Caching.Simple.CombineHashCodes(GetType(MemberAnalyser), Name, Description, Child, Field, [Property], [Method], Constructor, DefaultArguments)
					End Function
				
				#End Region
			
			#End Region
		
		#End Region

		#Region " Public Constants "
		
			''' <summary>Public Shared Reference to the Name of the Property: Name</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_NAME As String = "Name"
		
			''' <summary>Public Shared Reference to the Name of the Property: Description</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_DESCRIPTION As String = "Description"
		
			''' <summary>Public Shared Reference to the Name of the Property: Child</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_CHILD As String = "Child"
		
			''' <summary>Public Shared Reference to the Name of the Property: Field</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_FIELD As String = "Field"
		
			''' <summary>Public Shared Reference to the Name of the Property: Property</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_PROPERTY As String = "Property"
		
			''' <summary>Public Shared Reference to the Name of the Property: Method</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_METHOD As String = "Method"
		
			''' <summary>Public Shared Reference to the Name of the Property: Constructor</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_CONSTRUCTOR As String = "Constructor"
		
			''' <summary>Public Shared Reference to the Name of the Property: DefaultArguments</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_DEFAULTARGUMENTS As String = "DefaultArguments"
		
		#End Region

		#Region " Private Variables "
		
			''' <summary>Private Data Storage Variable for Property: Name</summary>
			''' <remarks></remarks>
			Private m_Name As System.String
		
			''' <summary>Private Data Storage Variable for Property: Description</summary>
			''' <remarks></remarks>
			Private m_Description As System.String
		
			''' <summary>Private Data Storage Variable for Property: Child</summary>
			''' <remarks></remarks>
			Private m_Child As MemberAnalyser
		
			''' <summary>Private Data Storage Variable for Property: Field</summary>
			''' <remarks></remarks>
			Private m_Field As System.Reflection.FieldInfo
		
			''' <summary>Private Data Storage Variable for Property: Property</summary>
			''' <remarks></remarks>
			Private m_Property As System.Reflection.PropertyInfo
		
			''' <summary>Private Data Storage Variable for Property: Method</summary>
			''' <remarks></remarks>
			Private m_Method As System.Reflection.MethodInfo
		
			''' <summary>Private Data Storage Variable for Property: Constructor</summary>
			''' <remarks></remarks>
			Private m_Constructor As System.Reflection.ConstructorInfo
		
			''' <summary>Private Data Storage Variable for Property: DefaultArguments</summary>
			''' <remarks></remarks>
			Private m_DefaultArguments As System.Object()
		
		#End Region

		#Region " Public Properties "
		
			''' <summary>Provides Access to the Property: Name</summary>
			''' <remarks></remarks>
			Public Property Name() As System.String
				Get
					Return m_Name
				End Get
				Set(value As System.String)
					m_Name = value
					Parse(m_Name)
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Description</summary>
			''' <remarks></remarks>
			Public Property Description() As System.String
				Get
					Return m_Description
				End Get
				Set(value As System.String)
					m_Description = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Child</summary>
			''' <remarks></remarks>
			Public Property Child() As MemberAnalyser
				Get
					Return m_Child
				End Get
				Set(value As MemberAnalyser)
					m_Child = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Field</summary>
			''' <remarks></remarks>
			Public Property Field() As System.Reflection.FieldInfo
				Get
					Return m_Field
				End Get
				Set(value As System.Reflection.FieldInfo)
					m_Field = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Property</summary>
			''' <remarks></remarks>
			Public Property [Property]() As System.Reflection.PropertyInfo
				Get
					Return m_Property
				End Get
				Set(value As System.Reflection.PropertyInfo)
					m_Property = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Method</summary>
			''' <remarks></remarks>
			Public Property [Method]() As System.Reflection.MethodInfo
				Get
					Return m_Method
				End Get
				Set(value As System.Reflection.MethodInfo)
					m_Method = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: Constructor</summary>
			''' <remarks></remarks>
			Public Property Constructor() As System.Reflection.ConstructorInfo
				Get
					Return m_Constructor
				End Get
				Set(value As System.Reflection.ConstructorInfo)
					m_Constructor = value
				End Set
			End Property
		
			''' <summary>Provides Access to the Property: DefaultArguments</summary>
			''' <remarks></remarks>
			Public Property DefaultArguments() As System.Object()
				Get
					Return m_DefaultArguments
				End Get
				Set(value As System.Object())
					m_DefaultArguments = value
				End Set
			End Property
		
		#End Region

	End Class

End Namespace
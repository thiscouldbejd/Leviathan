Namespace Inspection

	''' <summary>Analysis Class for a Type.</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>10/02/2014 15:50:55</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Leviathan\_Inspection\Analysers\Generated\AssemblyAnalyser.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Leviathan\_Inspection\Analysers\Generated\AssemblyAnalyser.tt", "1")> _
	Partial Public Class AssemblyAnalyser
		Inherits System.Object

		#Region " Singleton Implementation "

			#Region " Private Constructors "

				''' <summary>Parametered Constructor (1 Parameters)</summary>
				Private Sub New( _
					ByVal _Assembly As System.Reflection.Assembly _
				)

					MyBase.New()

					Assembly = _Assembly

					PostConstructorCall()

				End Sub

				''' <summary>Parametered Constructor (2 Parameters)</summary>
				Private Sub New( _
					ByVal _Assembly As System.Reflection.Assembly, _
					ByVal _Assemblies As System.Reflection.Assembly() _
				)

					MyBase.New()

					Assembly = _Assembly
					Assemblies = _Assemblies

					PostConstructorCall()

				End Sub

			#End Region

			#Region " Private Shared Variables "

				Private Shared Singleton_Instances As New Hashtable

				Private Shared Singleton_Instances_LOCK As New Object

			#End Region

			#Region " Public Shared Functions "

				Public Shared Function GetInstance( _
					ByVal _Assembly As System.Reflection.Assembly _
				) As AssemblyAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Assembly)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New AssemblyAnalyser(_Assembly)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function

				Public Shared Function GetInstance( _
					ByVal _Assembly As System.Reflection.Assembly, _
					ByVal _Assemblies As System.Reflection.Assembly() _
				) As AssemblyAnalyser

					Dim instance_Hashcode As Integer = _
						Leviathan.Caching.Simple.CombineHashCodes(_Assembly, _Assemblies)

					SyncLock Singleton_Instances_LOCK

						If Not Singleton_Instances.Contains(instance_Hashcode) Then Singleton_Instances(instance_Hashcode) = _
							New AssemblyAnalyser(_Assembly, _Assemblies)

					End SyncLock

					Return Singleton_Instances(instance_Hashcode)

				End Function


			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Assembly</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ASSEMBLY As String = "Assembly"

			''' <summary>Public Shared Reference to the Name of the Property: Assemblies</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ASSEMBLIES As String = "Assemblies"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Assembly</summary>
			''' <remarks></remarks>
			Private m_Assembly As System.Reflection.Assembly

			''' <summary>Private Data Storage Variable for Property: Assemblies</summary>
			''' <remarks></remarks>
			Private m_Assemblies As System.Reflection.Assembly()

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Assembly</summary>
			''' <remarks></remarks>
			Public Property Assembly() As System.Reflection.Assembly
				Get
					Return m_Assembly
				End Get
				Set(value As System.Reflection.Assembly)
					m_Assembly = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Assemblies</summary>
			''' <remarks></remarks>
			Public Property Assemblies() As System.Reflection.Assembly()
				Get
					Return m_Assemblies
				End Get
				Set(value As System.Reflection.Assembly())
					m_Assemblies = value
				End Set
			End Property

		#End Region

	End Class

End Namespace
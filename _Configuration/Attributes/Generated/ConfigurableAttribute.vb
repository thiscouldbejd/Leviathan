Namespace Configuration

	''' <summary>Should be applied to fields/properties/parameters that can be configured from an external source. Use Default Value wherever possible.</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>10/02/2014 16:02:27</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Leviathan\_Configuration\Attributes\Generated\ConfigurableAttribute.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Leviathan\_Configuration\Attributes\Generated\ConfigurableAttribute.tt", "1")> _
	<AttributeUsageAttribute(AttributeTargets.[Field] Or AttributeTargets.[Property] Or AttributeTargets.[Parameter], _
		AllowMultiple:=True, Inherited:=True)> _
	Partial Public Class ConfigurableAttribute
		Inherits System.Xml.Serialization.XmlElementAttribute
		Implements System.IFormattable
		Implements System.IComparable

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String _
			)

				MyBase.New()

				Name = _Name

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (3 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (4 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (5 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String, _
				ByVal _ArgsDescription As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description
				ArgsDescription = _ArgsDescription

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (6 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String, _
				ByVal _ArgsDescription As System.String, _
				ByVal _Required As System.Boolean _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description
				ArgsDescription = _ArgsDescription
				Required = _Required

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (7 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String, _
				ByVal _ArgsDescription As System.String, _
				ByVal _Required As System.Boolean, _
				ByVal _ValidationRegex As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description
				ArgsDescription = _ArgsDescription
				Required = _Required
				ValidationRegex = _ValidationRegex

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (8 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String, _
				ByVal _ArgsDescription As System.String, _
				ByVal _Required As System.Boolean, _
				ByVal _ValidationRegex As System.String, _
				ByVal _DefaultValue As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description
				ArgsDescription = _ArgsDescription
				Required = _Required
				ValidationRegex = _ValidationRegex
				DefaultValue = _DefaultValue

				MyBase.ElementName = Name

			End Sub

			''' <summary>Parametered Constructor (9 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _ResourceContainingType As System.Type, _
				ByVal _ResourceName As System.String, _
				ByVal _Description As System.String, _
				ByVal _ArgsDescription As System.String, _
				ByVal _Required As System.Boolean, _
				ByVal _ValidationRegex As System.String, _
				ByVal _DefaultValue As System.String, _
				ByVal _Prefix As System.String _
			)

				MyBase.New()

				Name = _Name
				ResourceContainingType = _ResourceContainingType
				ResourceName = _ResourceName
				Description = _Description
				ArgsDescription = _ArgsDescription
				Required = _Required
				ValidationRegex = _ValidationRegex
				DefaultValue = _DefaultValue
				Prefix = _Prefix

				MyBase.ElementName = Name

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " Attributable Implementation "

				#Region " Public Shared Methods "

					Public Shared Function GetMember( _
						ByVal onType As Type _
					) As Leviathan.Inspection.MemberAnalyser

						Return GetSingleObject(GetMembers(onType))

					End Function

					Public Shared Function GetMembers( _
						ByVal onType As Type _
					) As Leviathan.Inspection.MemberAnalyser()

						Return Leviathan.Inspection.TypeAnalyser.GetInstance(onType) _
							.ExecuteQuery(Leviathan.Inspection.AnalyserQuery.QUERY_MEMBERS_READABLE _
								.SetPresentAttribute(GetType(ConfigurableAttribute)) _
						)

					End Function

				#End Region

			#End Region

			#Region " Resourced Implementation "

				#Region " Public Constants "

					''' <summary></summary>
					''' <remarks></remarks>
					Public Const RESOURCE_PREFIX As String = "@"

					''' <summary></summary>
					''' <remarks></remarks>
					Public Const RESOURCE_SUFFIX As String = "@"

				#End Region

				#Region " Private Properties "

					Private ReadOnly Property ResourceContainingAssembly() As System.Reflection.Assembly
						Get
							If ResourceContainingType Is Nothing Then

								If Not System.Reflection.Assembly.GetEntryAssembly Is Nothing Then

									Return System.Reflection.Assembly.GetEntryAssembly

								Else

									Return System.Reflection.Assembly.GetExecutingAssembly

								End If

							Else

								Return ResourceContainingType.Assembly

							End If
						End Get
					End Property

				#End Region

				#Region " Protected Methods "

					Protected Function GetResourcedValue( _
						ByVal value As String _
					) As String

						If Not String.IsNullOrEmpty(value) AndAlso value.StartsWith(RESOURCE_PREFIX) AndAlso _
							value.EndsWith(RESOURCE_SUFFIX) Then

							Return Resources.SingleResource( _
								ResourceContainingAssembly, ResourceName, _
								value.Substring(RESOURCE_PREFIX.Length, value.Length - _
								(RESOURCE_PREFIX.Length + RESOURCE_SUFFIX.Length)))

						Else

							Return value

						End If

					End Function

				#End Region

			#End Region

			#Region " IFormattable Implementation "

				#Region " Public Constants "

					''' <summary>Public Shared Reference to the Name of the Property: AsString</summary>
					''' <remarks></remarks>
					Public Const PROPERTY_ASSTRING As String = "AsString"

				#End Region

				#Region " Public Properties "

					''' <summary></summary>
					''' <remarks></remarks>
					Public ReadOnly Property AsString() As System.String
						Get
							Return Me.ToString()
						End Get
					End Property

				#End Region

				#Region " Public Shared Methods "

					Public Shared Function ToString_default( _
						ByVal Name As System.String, _
						ByVal Prefix As System.String _
					) As String

						Return String.Format( _
							"{1}{0}", _
							Name, _
							Prefix)

					End Function

				#End Region

				#Region " Public Methods "

					Public Overloads Overrides Function ToString() As String

						Return Me.ToString(String.Empty, Nothing)

					End Function

					Public Overloads Function ToString( _
						ByVal format As String _
					) As String

						If String.IsNullOrEmpty(format) OrElse String.Compare(format, "default", True) = 0 Then

							Return ToString_default( _
								Name, _
								Prefix _
							)

						End If

						Return String.Empty

					End Function

					Public Overloads Function ToString( _
						ByVal format As String, _
						ByVal formatProvider As System.IFormatProvider _
					) As String Implements System.IFormattable.ToString

						If String.IsNullOrEmpty(format) OrElse String.Compare(format, "default", True) = 0 Then	

							Return ToString_default( _
								Name, _
								Prefix _
							)

						End If

						Return String.Empty

					End Function

				#End Region

			#End Region

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						Dim typed_Value As ConfigurableAttribute = TryCast(value, ConfigurableAttribute)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							If Not Name Is Nothing Then return_Value = Name.CompareTo(typed_Value.Name)
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Name</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_NAME As String = "Name"

			''' <summary>Public Shared Reference to the Name of the Property: ResourceContainingType</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_RESOURCECONTAININGTYPE As String = "ResourceContainingType"

			''' <summary>Public Shared Reference to the Name of the Property: ResourceName</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_RESOURCENAME As String = "ResourceName"

			''' <summary>Public Shared Reference to the Name of the Property: Description</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_DESCRIPTION As String = "Description"

			''' <summary>Public Shared Reference to the Name of the Property: ArgsDescription</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ARGSDESCRIPTION As String = "ArgsDescription"

			''' <summary>Public Shared Reference to the Name of the Property: Required</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_REQUIRED As String = "Required"

			''' <summary>Public Shared Reference to the Name of the Property: ValidationRegex</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_VALIDATIONREGEX As String = "ValidationRegex"

			''' <summary>Public Shared Reference to the Name of the Property: DefaultValue</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_DEFAULTVALUE As String = "DefaultValue"

			''' <summary>Public Shared Reference to the Name of the Property: Prefix</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_PREFIX As String = "Prefix"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Name</summary>
			''' <remarks></remarks>
			Private m_Name As System.String

			''' <summary>Private Data Storage Variable for Property: ResourceContainingType</summary>
			''' <remarks></remarks>
			Private m_ResourceContainingType As System.Type

			''' <summary>Private Data Storage Variable for Property: ResourceName</summary>
			''' <remarks></remarks>
			Private m_ResourceName As System.String

			''' <summary>Private Data Storage Variable for Property: Description</summary>
			''' <remarks></remarks>
			Private m_Description As System.String

			''' <summary>Private Data Storage Variable for Property: ArgsDescription</summary>
			''' <remarks></remarks>
			Private m_ArgsDescription As System.String

			''' <summary>Private Data Storage Variable for Property: Required</summary>
			''' <remarks></remarks>
			Private m_Required As System.Boolean

			''' <summary>Private Data Storage Variable for Property: ValidationRegex</summary>
			''' <remarks></remarks>
			Private m_ValidationRegex As System.String

			''' <summary>Private Data Storage Variable for Property: DefaultValue</summary>
			''' <remarks></remarks>
			Private m_DefaultValue As System.String

			''' <summary>Private Data Storage Variable for Property: Prefix</summary>
			''' <remarks></remarks>
			Private m_Prefix As System.String

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Name</summary>
			''' <remarks></remarks>
			Public Property Name() As System.String
				Get
					Return m_Name
				End Get
				Set(value As System.String)
					m_Name = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: ResourceContainingType</summary>
			''' <remarks></remarks>
			Public Property ResourceContainingType() As System.Type
				Get
					Return m_ResourceContainingType
				End Get
				Set(value As System.Type)
					m_ResourceContainingType = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: ResourceName</summary>
			''' <remarks></remarks>
			Public Property ResourceName() As System.String
				Get
					Return m_ResourceName
				End Get
				Set(value As System.String)
					m_ResourceName = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Description</summary>
			''' <remarks></remarks>
			Public Property Description() As System.String
				Get
					Return m_Description
				End Get
				Set(value As System.String)
					m_Description = value
					m_Description = GetResourcedValue(m_Description)
				End Set
			End Property

			''' <summary>Provides Access to the Property: ArgsDescription</summary>
			''' <remarks></remarks>
			Public Property ArgsDescription() As System.String
				Get
					Return m_ArgsDescription
				End Get
				Set(value As System.String)
					m_ArgsDescription = value
					m_ArgsDescription = GetResourcedValue(m_ArgsDescription)
				End Set
			End Property

			''' <summary>Provides Access to the Property: Required</summary>
			''' <remarks></remarks>
			Public Property Required() As System.Boolean
				Get
					Return m_Required
				End Get
				Set(value As System.Boolean)
					m_Required = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: ValidationRegex</summary>
			''' <remarks></remarks>
			Public Property ValidationRegex() As System.String
				Get
					Return m_ValidationRegex
				End Get
				Set(value As System.String)
					m_ValidationRegex = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: DefaultValue</summary>
			''' <remarks></remarks>
			Public Property DefaultValue() As System.String
				Get
					Return m_DefaultValue
				End Get
				Set(value As System.String)
					m_DefaultValue = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Prefix</summary>
			''' <remarks></remarks>
			Public Property Prefix() As System.String
				Get
					Return m_Prefix
				End Get
				Set(value As System.String)
					m_Prefix = value
				End Set
			End Property

		#End Region

	End Class

End Namespace
Namespace Visualisation

	''' <summary></summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>10/02/2014 15:54:23</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Leviathan\_Visualisation\Generated\Slice.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Leviathan\_Visualisation\Generated\Slice.tt", "1")> _
	Partial Public Class Slice
		Inherits System.Object
		Implements System.IComparable

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

				m_Rows = New System.Collections.Generic.List(Of Row)
				m_Generated = System.DateTime.Now()
			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Rows As System.Collections.Generic.List(Of Row) _
			)

				MyBase.New()

				Rows = _Rows

				m_Generated = System.DateTime.Now()
			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Rows As System.Collections.Generic.List(Of Row), _
				ByVal _Generated As System.DateTime _
			)

				MyBase.New()

				Rows = _Rows
				Generated = _Generated

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						Dim typed_Value As Slice = TryCast(value, Slice)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							return_Value = Generated.CompareTo(typed_Value.Generated)
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Rows</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ROWS As String = "Rows"

			''' <summary>Public Shared Reference to the Name of the Property: Generated</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_GENERATED As String = "Generated"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Rows</summary>
			''' <remarks></remarks>
			Private m_Rows As System.Collections.Generic.List(Of Row)

			''' <summary>Private Data Storage Variable for Property: Generated</summary>
			''' <remarks></remarks>
			Private m_Generated As System.DateTime

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Rows</summary>
			''' <remarks></remarks>
			Public Property Rows() As System.Collections.Generic.List(Of Row)
				Get
					Return m_Rows
				End Get
				Set(value As System.Collections.Generic.List(Of Row))
					m_Rows = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Generated</summary>
			''' <remarks></remarks>
			Public Property Generated() As System.DateTime
				Get
					Return m_Generated
				End Get
				Set(value As System.DateTime)
					m_Generated = value
				End Set
			End Property

		#End Region

	End Class

End Namespace